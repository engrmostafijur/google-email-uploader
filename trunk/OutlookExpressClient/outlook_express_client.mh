// Copyright 2007 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
//
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef OUTLOOKEXPRESSCLIENT_OUTLOOK_EXPRESS_CLIENT_H__
#define OUTLOOKEXPRESSCLIENT_OUTLOOK_EXPRESS_CLIENT_H__

#define INITGUID
#define WIN32_LEAN_AND_MEAN   // Exclude rarely-used stuff from Windows headers

#include <windows.h>
#include "./msoeapi.h"

#using "GoogleEmailUploader.exe"

using ::Google::MailClientInterfaces::FolderKind;
using ::Google::MailClientInterfaces::IClient;
using ::Google::MailClientInterfaces::IClientFactory;
using ::Google::MailClientInterfaces::IFolder;
using ::Google::MailClientInterfaces::IMail;
using ::Google::MailClientInterfaces::IStore;

using ::System::Collections::ArrayList;
using ::System::Collections::IEnumerable;
using ::System::Collections::IEnumerator;
using ::System::Diagnostics::Debug;
using ::System::Environment;
using ::System::Exception;
using ::System::IDisposable;
using ::System::Object;
using ::System::String;
using ::System::Version;

namespace Google {
namespace OutlookExpressClient {
__gc class OutlookExpressStore;
__gc class OutlookExpressFolder;
__gc class OutlookExpressEMailMessage;

// OE Client owns stores.
__gc public class OutlookExpressClient : public IClient {
 public:
  OutlookExpressClient();
  void Dispose();

  __property String *get_Name() {
    Debug::Assert(store_list_ != NULL);
    return "Outlook Express";
  }

  __property bool get_SupportsContacts(){
    return false;
  }
  
  __property bool get_SupportsLoadingStore() {
    return false;
  }

  __property IEnumerable *get_Stores() {
    Debug::Assert(store_list_ != NULL);
    return store_list_;
  }

  __property IEnumerable *get_LoadedStoreFileNames() {
    Debug::Assert(store_list_ != NULL);
    return loaded_store_file_names_;
  }

  IStore* OpenStore(String *filename) {
    return NULL;
  }

 private:
  // store_list == NULL implies disposed.
  ArrayList *store_list_;
  ArrayList *contacts_list_;
  ArrayList *loaded_store_file_names_;
};

// Store owns direct containing folders.
__gc class OutlookExpressStore : public IStore {
 public:
  OutlookExpressStore(OutlookExpressClient *outlook_express_client,
                      IStoreNamespace *store_namespace);
  void Dispose();

  __property IClient *get_Client() {
    Debug::Assert(outlook_express_client_ != NULL);
    return outlook_express_client_;
  }

  __property String *get_PersistName() {
    Debug::Assert(outlook_express_client_ != NULL);
    return name_;
  }

  __property String *get_DisplayName() {
    Debug::Assert(outlook_express_client_ != NULL);
    return name_;
  }

  __property IEnumerable *get_Contacts() {
    Debug::Assert(outlook_express_client_ != NULL);
    return contact_list_;
  }

  __property unsigned int get_ContactCount() {
    Debug::Assert(outlook_express_client_ != NULL);
    return static_cast<unsigned int>(contact_list_->Count);
  }

  __property IEnumerable *get_Folders();

 public private:
  __property IStoreNamespace *get_NamespaceStore() {
    Debug::Assert(outlook_express_client_ != NULL);
    return store_namespace_;
  }

  ArrayList *GetSubFolders(
    STOREFOLDERID parent_folder_id,
    OutlookExpressFolder *parent_folder);

 private:
  // outlook_express_client_ == NULL implies this is disposed.
  OutlookExpressClient *outlook_express_client_;
  String *name_;
  IStoreNamespace *store_namespace_;
  ArrayList *folder_list_;
  ArrayList *contact_list_;
};

// folder owns subfolders.
__gc class OutlookExpressFolder : public IFolder {
 public:
  OutlookExpressFolder(OutlookExpressStore *oe_client_store,
                       OutlookExpressFolder *parent_folder,
                       const tagFOLDERPROPS& folder_props,
                       IStoreFolder *store_folder);
  void Dispose();
  __property FolderKind get_Kind();
  __property IEnumerable *get_SubFolders();
  __property IEnumerable *get_Mails();

  __property IStore *get_Store() {
    Debug::Assert(oe_client_store_ != NULL);
    return oe_client_store_;
  }

  __property IFolder *get_ParentFolder() {
    Debug::Assert(oe_client_store_ != NULL);
    return parent_folder_;
  }

  __property String *get_Name() {
    Debug::Assert(oe_client_store_ != NULL);
    return name_;
  }

  __property unsigned int get_MailCount() {
    Debug::Assert(oe_client_store_ != NULL);
    return message_count_;
  }

 public private:
  __property IStoreFolder *get_StoreFolder() {
    return store_folder_;
  }

 private:
  // oe_client_store_ == NULL implies disposed.
  OutlookExpressStore *oe_client_store_;
  OutlookExpressFolder *parent_folder_;
  STOREFOLDERID folder_id_;
  SPECIALFOLDER folder_type_;
  unsigned int message_count_;
  String *name_;
  IStoreFolder *store_folder_;
  ArrayList *subfolders_;
};

// Mail messages are meant to live for a short duration only.
__gc class OutlookExpressEMailMessage : public IMail {
 public:
  OutlookExpressEMailMessage(
      OutlookExpressFolder *oe_folder,
      unsigned int message_id,
      unsigned int message_size,
      unsigned int message_flags);

  void Dispose() {
    Debug::Assert(oe_folder_ != NULL);
    oe_folder_ = NULL;
    buffer_ = NULL;
  }

  __property IFolder *get_Folder() {
    Debug::Assert(oe_folder_ != NULL);
    return oe_folder_;
  }

  __property String *get_MailId() {
    Debug::Assert(oe_folder_ != NULL);
    return message_id_.ToString();
  }

  __property bool get_IsRead() {
    Debug::Assert(oe_folder_ != NULL);
    return !(message_flags_ & MSG_UNREAD);
  }

  __property bool get_IsStarred() {
    Debug::Assert(oe_folder_ != NULL);
    return !!(message_flags_ & MSG_FLAGGED);
  }

  __property unsigned int get_MessageSize() {
    Debug::Assert(oe_folder_ != NULL);
    return message_size_;
  }

  __property unsigned char get_Rfc822Buffer() __gc[];

 private:
  // oe_folder_ == NULL implies disposed.
  OutlookExpressFolder *oe_folder_;
  unsigned int message_id_;
  unsigned int message_size_;
  unsigned int message_flags_;
  unsigned char buffer_ __gc[];
};

// We implement IDisposable.
// When used in foreach in C#/VB compiler calls dispose when done with the
// iterations
__gc class OutlookExpressEMailEnumerator : public IEnumerator,
    public IDisposable {
 public:
  OutlookExpressEMailEnumerator(OutlookExpressFolder *oe_folder);
  ~OutlookExpressEMailEnumerator();
  __property Object *get_Current();
  bool MoveNext();
  void Reset();
  void Dispose();

 private:
  OutlookExpressFolder *oe_folder_;
  HENUMSTORE message_iterator_;

  DWORD curr_message_size_;
  MESSAGEID curr_message_id_;
  DWORD curr_message_flags_;
};

__gc class OutlookExpressEMailEnumerable : public IEnumerable {
 public:
  OutlookExpressEMailEnumerable(OutlookExpressFolder *oe_folder) {
    oe_folder_ = oe_folder;
  }

  IEnumerator *GetEnumerator() {
    return new OutlookExpressEMailEnumerator(oe_folder_);
  }

 private:
  OutlookExpressFolder *oe_folder_;
};

__gc class OutlookExpressClientFactory : public IClientFactory {
public:
  OutlookExpressClientFactory() {
    Version *vistaVersion = new Version(6, 0);
    if (Environment::OSVersion->Version->CompareTo(vistaVersion) >= 0) {
      throw new Exception("Unsupported OS version");
    }
    clientProcessNames = new ArrayList();
    clientProcessNames->Add(new String("msimn"));
  }

  __property IEnumerable *get_ClientProcessNames(){
    return clientProcessNames;
  }

  IClient *CreateClient() {
    return new OutlookExpressClient();
  }

 private:
  ArrayList *clientProcessNames;
};
}}

template<typename Type>
class ComPtr {
 public:
  ComPtr() {
    ptr_ = NULL;
  }

  ~ComPtr() {
    if (ptr_) {
      ptr_->Release();
      ptr_ = NULL;
    }
  }

  operator Type*() {
    return this->ptr_;
  }

  Type *operator ->() {
    return this->ptr_;
  }

  Type **operator &() {
    return &this->ptr_;
  }

  Type *Detach() {
    Type *ret_ptr = this->ptr_;
    this->ptr_ = NULL;
    return ret_ptr;
  }

 private:
  Type *ptr_;
};

#endif  // OUTLOOKEXPRESSCLIENT_OUTLOOK_EXPRESS_CLIENT_H__
